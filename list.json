{
    "current_lesson": "initialize-a-loopback-node-js-project-through-the-cli",
    "next_lesson": "create-a-model-to-persist-data-in-a-node-js-loopback-api",
    "next_lesson_http_url": "https://egghead.io/lessons/create-a-model-to-persist-data-in-a-node-js-loopback-api?series=build-a-node-js-rest-api-with-loopback",
    "list_type": "course",
    "list": {
        "id": 122,
        "slug": "build-a-node-js-rest-api-with-loopback",
        "title": "Build a Node.js REST API with LoopBack",
        "description": "In this course the developer will learn how to create a LoopBack API and build it out to an API that can be used as a backend for apps. We will start by creating a basic LoopBack API project and gradually enhance it to a production ready API. The API we create defines a few models to persist the data and has custom functionality, validation and hooks added to those models. \r\n\r\nAfter our data structure is defined we will learn how to extend the functionality of LoopBack by using mixins and components. We will also lock our API down using ACLâ€™s and create a mechanism to automatically define the admin and user roles and create our admin user.   \r\n\r\nThe last part of the course will show how how to filter the data stored in the API. We will make the API production-ready by adding unit tests, connecting it to MongoDB and we will show how to deploy the app to now.sh.   ",
        "updated_at": "2017-06-23T11:22:08.227-05:00",
        "http_url": "https://egghead.io/courses/build-a-node-js-rest-api-with-loopback",
        "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/122/thumb/EGH_NodeJSLoopback_Final.png?1496436737",
        "lessons": [{
            "id": 1980,
            "title": "Initialize a LoopBack Node.js Project through the CLI",
            "slug": "initialize-a-loopback-node-js-project-through-the-cli",
            "duration": 77,
            "state": "published",
            "series_row_order": -4644868,
            "library_list": [],
            "language_list": [],
            "framework_list": [],
            "tool_list": [],
            "platform_list": ["node"],
            "skillset_list": [],
            "skill_level_list": [],
            "http_url": "https://egghead.io/lessons/initialize-a-loopback-node-js-project-through-the-cli",
            "url": "https://egghead.io/api/v1/lessons/initialize-a-loopback-node-js-project-through-the-cli",
            "summary": "LoopBack is a framework built on top of Express for creating APIs. It allows you to create end-to-end REST APIs that can access data from many data sources such as MondoDB, PostgreSQL, MySQL or other REST APIs.\r\n\r\nIn this lesson you will learn how to install loopback-cli and create a new LoopBack API project. After creating the basic LoopBack project through the CLI, running the server will give us access to the project and API Explorer urls. The user model will be available to us because user authentication was enabled.",
            "icon_url": "//d1xwtr0qwr70yv.cloudfront.net/assets/tech/node-48eacec51baa2fa9215f271df5b2afd5.svg",
            "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/initialize-a-loopback-node-js-project-through-the-cli/initialize-a-loopback-node-js-project-through-the-cli.jpg",
            "transcript_url": "https://egghead.io/api/v1/lessons/initialize-a-loopback-node-js-project-through-the-cli/transcript",
            "technology": {
                "name": "node",
                "label": "Node.js",
                "http_url": "https://egghead.io/technologies/node",
                "logo_http_url": "//d1xwtr0qwr70yv.cloudfront.net/assets/tech/node-48eacec51baa2fa9215f271df5b2afd5.svg"
            },
            "lesson_http_url": "https://egghead.io/lessons/initialize-a-loopback-node-js-project-through-the-cli",
            "type": "Lesson",
            "instructor_url": "https://egghead.io/api/v1/instructors/bram-borggreve",
            "instructor": {
                "slug": "bram-borggreve",
                "full_name": "Bram Borggreve",
                "http_url": "https://egghead.io/instructors/bram-borggreve",
                "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/118/thumb/foto-bram-square-500.png?1488664588"
            },
            "wistia_id": "xr5rjudz5w",
            "media_urls": {
                "wistia_url": "https://fast.wistia.com/medias/xr5rjudz5w",
                "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/597963_9c9790c77623ca781daf7dcb2c7eb580/597963.m3u8",
                "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/597963_9c9790c77623ca781daf7dcb2c7eb580/597963.mpd"
            },
            "completed": false
        }, {
            "id": 2109,
            "title": "Create a model to persist data in a Node.js LoopBack API",
            "slug": "create-a-model-to-persist-data-in-a-node-js-loopback-api",
            "duration": 181,
            "state": "published",
            "series_row_order": -1394695,
            "library_list": [],
            "language_list": [],
            "framework_list": [],
            "tool_list": [],
            "platform_list": ["node"],
            "skillset_list": [],
            "skill_level_list": [],
            "http_url": "https://egghead.io/lessons/create-a-model-to-persist-data-in-a-node-js-loopback-api",
            "url": "https://egghead.io/api/v1/lessons/create-a-model-to-persist-data-in-a-node-js-loopback-api",
            "summary": "In this lesson you will learn what a LoopBack model is, you will create a Product model using the LoopbBack CLI. The product model will be based off the built-in PersistedModel which gives it basic functionality like Create, Ready, Update, Delete and some more.  Using the API Explorer you can interact with the new model, store, retrieve, edit and delete the product data.",
            "icon_url": "//d1xwtr0qwr70yv.cloudfront.net/assets/tech/node-48eacec51baa2fa9215f271df5b2afd5.svg",
            "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/create-a-model-to-persist-data-in-a-node-js-loopback-api/create-a-model-to-persist-data-in-a-node-js-loopback-api.jpg",
            "transcript_url": "https://egghead.io/api/v1/lessons/create-a-model-to-persist-data-in-a-node-js-loopback-api/transcript",
            "technology": {
                "name": "node",
                "label": "Node.js",
                "http_url": "https://egghead.io/technologies/node",
                "logo_http_url": "//d1xwtr0qwr70yv.cloudfront.net/assets/tech/node-48eacec51baa2fa9215f271df5b2afd5.svg"
            },
            "lesson_http_url": "https://egghead.io/lessons/create-a-model-to-persist-data-in-a-node-js-loopback-api",
            "type": "Lesson",
            "instructor_url": "https://egghead.io/api/v1/instructors/bram-borggreve",
            "instructor": {
                "slug": "bram-borggreve",
                "full_name": "Bram Borggreve",
                "http_url": "https://egghead.io/instructors/bram-borggreve",
                "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/118/thumb/foto-bram-square-500.png?1488664588"
            },
            "wistia_id": "u7ei6huqs4",
            "media_urls": {
                "wistia_url": "https://fast.wistia.com/medias/u7ei6huqs4",
                "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/597957_7908464227ab007d2f0a569943084733/597957.m3u8",
                "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/597957_7908464227ab007d2f0a569943084733/597957.mpd"
            },
            "completed": false
        }, {
            "id": 2122,
            "title": "Persist in-memory data to a file when developing Node.js LoopBack API's",
            "slug": "persist-in-memory-data-to-a-file-when-developing-node-js-loopback-api-s",
            "duration": 43,
            "state": "published",
            "series_row_order": 1515510,
            "library_list": [],
            "language_list": [],
            "framework_list": [],
            "tool_list": [],
            "platform_list": ["node"],
            "skillset_list": [],
            "skill_level_list": [],
            "http_url": "https://egghead.io/lessons/persist-in-memory-data-to-a-file-when-developing-node-js-loopback-api-s",
            "url": "https://egghead.io/api/v1/lessons/persist-in-memory-data-to-a-file-when-developing-node-js-loopback-api-s",
            "summary": "In this lesson you will learn how to persist the data from the memory connector. As the name suggests, the memory connector stores the data in memory. This means that if you restart the server, the data is gone. In development mode it can be useful to store this data in a file, so it gets persisted between server restarts, and it can be easily inspected.",
            "icon_url": "//d1xwtr0qwr70yv.cloudfront.net/assets/tech/node-48eacec51baa2fa9215f271df5b2afd5.svg",
            "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/persist-in-memory-data-to-a-file-when-developing-node-js-loopback-api-s/persist-in-memory-data-to-a-file-when-developing-node-js-loopback-api-s.jpg",
            "transcript_url": "https://egghead.io/api/v1/lessons/persist-in-memory-data-to-a-file-when-developing-node-js-loopback-api-s/transcript",
            "technology": {
                "name": "node",
                "label": "Node.js",
                "http_url": "https://egghead.io/technologies/node",
                "logo_http_url": "//d1xwtr0qwr70yv.cloudfront.net/assets/tech/node-48eacec51baa2fa9215f271df5b2afd5.svg"
            },
            "lesson_http_url": "https://egghead.io/lessons/persist-in-memory-data-to-a-file-when-developing-node-js-loopback-api-s",
            "type": "Lesson",
            "instructor_url": "https://egghead.io/api/v1/instructors/bram-borggreve",
            "instructor": {
                "slug": "bram-borggreve",
                "full_name": "Bram Borggreve",
                "http_url": "https://egghead.io/instructors/bram-borggreve",
                "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/118/thumb/foto-bram-square-500.png?1488664588"
            },
            "wistia_id": "r32366gxdf",
            "media_urls": {
                "wistia_url": "https://fast.wistia.com/medias/r32366gxdf",
                "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/597968_2e98b91bc1d3232a0408129b9b5c76e4/597968.m3u8",
                "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/597968_2e98b91bc1d3232a0408129b9b5c76e4/597968.mpd"
            },
            "completed": false
        }, {
            "id": 2124,
            "title": "Setup a development mode in LoopBack API using nodemon",
            "slug": "setup-a-development-mode-in-loopback-api-using-nodemon",
            "duration": 29,
            "state": "published",
            "series_row_order": 3849716,
            "library_list": [],
            "language_list": [],
            "framework_list": [],
            "tool_list": [],
            "platform_list": ["node"],
            "skillset_list": [],
            "skill_level_list": [],
            "http_url": "https://egghead.io/lessons/setup-a-development-mode-in-loopback-api-using-nodemon",
            "url": "https://egghead.io/api/v1/lessons/setup-a-development-mode-in-loopback-api-using-nodemon",
            "summary": "In this lesson we will learn to create a development mode for our server. We do this by installing nodemon as a dev dependency and creating a script tag called 'dev'. \r\n\r\nThis script tag will execute the command `nodemon server/server.js --watch common --watch server`.  \r\n\r\nWe can execute this command by running `npm run dev`. \r\n\r\nWhen running in development mode the server will be automatically restarted when there are changes detected in the `common` and `server` directories.",
            "icon_url": "//d1xwtr0qwr70yv.cloudfront.net/assets/tech/node-48eacec51baa2fa9215f271df5b2afd5.svg",
            "thumb_nail": "",
            "transcript_url": "https://egghead.io/api/v1/lessons/setup-a-development-mode-in-loopback-api-using-nodemon/transcript",
            "technology": {
                "name": "node",
                "label": "Node.js",
                "http_url": "https://egghead.io/technologies/node",
                "logo_http_url": "//d1xwtr0qwr70yv.cloudfront.net/assets/tech/node-48eacec51baa2fa9215f271df5b2afd5.svg"
            },
            "lesson_http_url": "https://egghead.io/lessons/setup-a-development-mode-in-loopback-api-using-nodemon",
            "type": "Lesson",
            "instructor_url": "https://egghead.io/api/v1/instructors/bram-borggreve",
            "instructor": {
                "slug": "bram-borggreve",
                "full_name": "Bram Borggreve",
                "http_url": "https://egghead.io/instructors/bram-borggreve",
                "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/118/thumb/foto-bram-square-500.png?1488664588"
            },
            "wistia_id": "n5jojfp2bq",
            "media_urls": {
                "wistia_url": "https://fast.wistia.com/medias/n5jojfp2bq",
                "hls_url": null,
                "dash_url": null
            },
            "completed": false
        }, {
            "id": 2110,
            "title": "Create a relation between two LoopBack models",
            "slug": "create-a-relation-between-two-loopback-models",
            "duration": 180,
            "state": "published",
            "series_row_order": 5720820,
            "library_list": [],
            "language_list": [],
            "framework_list": [],
            "tool_list": [],
            "platform_list": ["node"],
            "skillset_list": [],
            "skill_level_list": [],
            "http_url": "https://egghead.io/lessons/create-a-relation-between-two-loopback-models",
            "url": "https://egghead.io/api/v1/lessons/create-a-relation-between-two-loopback-models",
            "summary": "A relation in LoopBack is a way to associate the data from multiple models with each other. LoopBack supports various types of relations each with a different use case.\r\n\r\nIn this lesson we will create a second model called Category and create a relation between the Category and the Product models. To do this we will first add a property to the Product model called `categoryId`. This will allow us to store for each Product the category it belongs to. We then move on to create the actual relationships. \r\n\r\nOur first relationship defines that a `Category hasMany Products` and the second one that a `Product belongsTo a Category`.\r\n\r\nAfter defining these relations we will use the API Explorer to see how we can interact with this related data.",
            "icon_url": "//d1xwtr0qwr70yv.cloudfront.net/assets/tech/node-48eacec51baa2fa9215f271df5b2afd5.svg",
            "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/create-a-relation-between-two-loopback-models/create-a-relation-between-two-loopback-models.jpg",
            "transcript_url": "https://egghead.io/api/v1/lessons/create-a-relation-between-two-loopback-models/transcript",
            "technology": {
                "name": "node",
                "label": "Node.js",
                "http_url": "https://egghead.io/technologies/node",
                "logo_http_url": "//d1xwtr0qwr70yv.cloudfront.net/assets/tech/node-48eacec51baa2fa9215f271df5b2afd5.svg"
            },
            "lesson_http_url": "https://egghead.io/lessons/create-a-relation-between-two-loopback-models",
            "type": "Lesson",
            "instructor_url": "https://egghead.io/api/v1/instructors/bram-borggreve",
            "instructor": {
                "slug": "bram-borggreve",
                "full_name": "Bram Borggreve",
                "http_url": "https://egghead.io/instructors/bram-borggreve",
                "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/118/thumb/foto-bram-square-500.png?1488664588"
            },
            "wistia_id": "4namrgebhj",
            "media_urls": {
                "wistia_url": "https://fast.wistia.com/medias/4namrgebhj",
                "hls_url": null,
                "dash_url": null
            },
            "completed": false
        }, {
            "id": 2112,
            "title": "Define a remote method on a LoopBack model",
            "slug": "define-a-remote-method-on-a-loopback-model",
            "duration": 138,
            "state": "published",
            "series_row_order": 6755828,
            "library_list": [],
            "language_list": [],
            "framework_list": [],
            "tool_list": [],
            "platform_list": ["node"],
            "skillset_list": [],
            "skill_level_list": [],
            "http_url": "https://egghead.io/lessons/define-a-remote-method-on-a-loopback-model",
            "url": "https://egghead.io/api/v1/lessons/define-a-remote-method-on-a-loopback-model",
            "summary": "In this lesson we look at extending the functionality of LoopBack models by defining a remote method. \r\n\r\nA remote method is a method on a model exposed over a custom REST endpoint. \r\n\r\nUsing the `lb remote-method` command we will create the remote method meta-data in `product.json`. We will verify that this got created and that we see the new REST endpoint got added. Then we will create the actual method in `product.js` and enhance it so that the API will return an error if we want to buy a negative amount of products.",
            "icon_url": "//d1xwtr0qwr70yv.cloudfront.net/assets/tech/node-48eacec51baa2fa9215f271df5b2afd5.svg",
            "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/define-a-remote-method-on-a-loopback-model/define-a-remote-method-on-a-loopback-model.jpg",
            "transcript_url": "https://egghead.io/api/v1/lessons/define-a-remote-method-on-a-loopback-model/transcript",
            "technology": {
                "name": "node",
                "label": "Node.js",
                "http_url": "https://egghead.io/technologies/node",
                "logo_http_url": "//d1xwtr0qwr70yv.cloudfront.net/assets/tech/node-48eacec51baa2fa9215f271df5b2afd5.svg"
            },
            "lesson_http_url": "https://egghead.io/lessons/define-a-remote-method-on-a-loopback-model",
            "type": "Lesson",
            "instructor_url": "https://egghead.io/api/v1/instructors/bram-borggreve",
            "instructor": {
                "slug": "bram-borggreve",
                "full_name": "Bram Borggreve",
                "http_url": "https://egghead.io/instructors/bram-borggreve",
                "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/118/thumb/foto-bram-square-500.png?1488664588"
            },
            "wistia_id": "fyrxsw9z20",
            "media_urls": {
                "wistia_url": "https://fast.wistia.com/medias/fyrxsw9z20",
                "hls_url": null,
                "dash_url": null
            },
            "completed": false
        }, {
            "id": 2132,
            "title": "Add validation rules to a model in LoopBack API ",
            "slug": "add-validation-rules-to-a-model-in-loopback-api",
            "duration": 128,
            "state": "published",
            "series_row_order": 7363061,
            "library_list": [],
            "language_list": [],
            "framework_list": [],
            "tool_list": [],
            "platform_list": ["node"],
            "skillset_list": [],
            "skill_level_list": [],
            "http_url": "https://egghead.io/lessons/add-validation-rules-to-a-model-in-loopback-api",
            "url": "https://egghead.io/api/v1/lessons/add-validation-rules-to-a-model-in-loopback-api",
            "summary": "We can add validation rules to our models to make sure the data we store in our API is how we want it.\r\n\r\nIn this lesson we will add validation rules to the Product model.\r\n\r\nWe will make sure the product name has a minimal length using the `validatesLengthOf` rule and that it is unique using the `validatesUniquenessOf` rule. \r\n\r\nFor the price property we will add a custom validation to make sure that the value entered is not a negative integer. Additionally we will show how to do an async validation using `validateAsync` . This can for instance be useful if you want the validation to depend on a value in the database or a remote system.",
            "icon_url": "//d1xwtr0qwr70yv.cloudfront.net/assets/tech/node-48eacec51baa2fa9215f271df5b2afd5.svg",
            "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/add-validation-rules-to-a-model-in-loopback-api/add-validation-rules-to-a-model-in-loopback-api.jpg",
            "transcript_url": "https://egghead.io/api/v1/lessons/add-validation-rules-to-a-model-in-loopback-api/transcript",
            "technology": {
                "name": "node",
                "label": "Node.js",
                "http_url": "https://egghead.io/technologies/node",
                "logo_http_url": "//d1xwtr0qwr70yv.cloudfront.net/assets/tech/node-48eacec51baa2fa9215f271df5b2afd5.svg"
            },
            "lesson_http_url": "https://egghead.io/lessons/add-validation-rules-to-a-model-in-loopback-api",
            "type": "Lesson",
            "instructor_url": "https://egghead.io/api/v1/instructors/bram-borggreve",
            "instructor": {
                "slug": "bram-borggreve",
                "full_name": "Bram Borggreve",
                "http_url": "https://egghead.io/instructors/bram-borggreve",
                "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/118/thumb/foto-bram-square-500.png?1488664588"
            },
            "wistia_id": "v51tyichnj",
            "media_urls": {
                "wistia_url": "https://fast.wistia.com/medias/v51tyichnj",
                "hls_url": null,
                "dash_url": null
            },
            "completed": false
        }, {
            "id": 2156,
            "title": "Add unit tests to a LoopBack API project",
            "slug": "add-unit-tests-to-a-loopback-api-project",
            "duration": 201,
            "state": "published",
            "series_row_order": 7893877,
            "library_list": [],
            "language_list": [],
            "framework_list": [],
            "tool_list": [],
            "platform_list": ["node"],
            "skillset_list": [],
            "skill_level_list": [],
            "http_url": "https://egghead.io/lessons/add-unit-tests-to-a-loopback-api-project",
            "url": "https://egghead.io/api/v1/lessons/add-unit-tests-to-a-loopback-api-project",
            "summary": "In this lesson we will learn how to add tests to the project to make sure our API behaves as we expect. \r\n\r\nAfter installing `mocha` and `chai` as devDependencies we will add `test` and `test:watch` scripts to our `package.json`. We will create a different datasource what we will use when running the tests by copying `datasources.json` to `datasources.test.json` and prefixing our `test` command with `NODE_ENV=test`. \r\n\r\nWe will verify that our tests run against an empty datasource. Weâ€™ll also add various tests to verify that our remote method and validation on the Product model behave as expected.",
            "icon_url": "//d1xwtr0qwr70yv.cloudfront.net/assets/tech/node-48eacec51baa2fa9215f271df5b2afd5.svg",
            "thumb_nail": "",
            "transcript_url": "https://egghead.io/api/v1/lessons/add-unit-tests-to-a-loopback-api-project/transcript",
            "technology": {
                "name": "node",
                "label": "Node.js",
                "http_url": "https://egghead.io/technologies/node",
                "logo_http_url": "//d1xwtr0qwr70yv.cloudfront.net/assets/tech/node-48eacec51baa2fa9215f271df5b2afd5.svg"
            },
            "lesson_http_url": "https://egghead.io/lessons/add-unit-tests-to-a-loopback-api-project",
            "type": "Lesson",
            "instructor_url": "https://egghead.io/api/v1/instructors/bram-borggreve",
            "instructor": {
                "slug": "bram-borggreve",
                "full_name": "Bram Borggreve",
                "http_url": "https://egghead.io/instructors/bram-borggreve",
                "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/118/thumb/foto-bram-square-500.png?1488664588"
            },
            "wistia_id": "p6ggof2s9r",
            "media_urls": {
                "wistia_url": "https://fast.wistia.com/medias/p6ggof2s9r",
                "hls_url": null,
                "dash_url": null
            },
            "completed": false
        }, {
            "id": 2137,
            "title": "Add Operation Hooks to a LoopBack model",
            "slug": "add-operation-hooks-to-a-loopback-model",
            "duration": 159,
            "state": "published",
            "series_row_order": 8106423,
            "library_list": [],
            "language_list": [],
            "framework_list": [],
            "tool_list": [],
            "platform_list": ["node"],
            "skillset_list": [],
            "skill_level_list": [],
            "http_url": "https://egghead.io/lessons/add-operation-hooks-to-a-loopback-model",
            "url": "https://egghead.io/api/v1/lessons/add-operation-hooks-to-a-loopback-model",
            "summary": "In this lesson we will learn how to add operation hooks to our models. In the Product model we will create a `before safe` observer that will check if the category we want to add the product to exists. \r\n\r\nIn our Category model we will create a `before delete` observer to prevent categories from being deleted when they have products.\r\n\r\nWe will create a unit test to verify that both of these operation hooks work as expected.",
            "icon_url": "//d1xwtr0qwr70yv.cloudfront.net/assets/tech/node-48eacec51baa2fa9215f271df5b2afd5.svg",
            "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/add-operation-hooks-to-a-loopback-model/add-operation-hooks-to-a-loopback-model.jpg",
            "transcript_url": "https://egghead.io/api/v1/lessons/add-operation-hooks-to-a-loopback-model/transcript",
            "technology": {
                "name": "node",
                "label": "Node.js",
                "http_url": "https://egghead.io/technologies/node",
                "logo_http_url": "//d1xwtr0qwr70yv.cloudfront.net/assets/tech/node-48eacec51baa2fa9215f271df5b2afd5.svg"
            },
            "lesson_http_url": "https://egghead.io/lessons/add-operation-hooks-to-a-loopback-model",
            "type": "Lesson",
            "instructor_url": "https://egghead.io/api/v1/instructors/bram-borggreve",
            "instructor": {
                "slug": "bram-borggreve",
                "full_name": "Bram Borggreve",
                "http_url": "https://egghead.io/instructors/bram-borggreve",
                "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/118/thumb/foto-bram-square-500.png?1488664588"
            },
            "wistia_id": "jc9g5a3tnk",
            "media_urls": {
                "wistia_url": "https://fast.wistia.com/medias/jc9g5a3tnk",
                "hls_url": null,
                "dash_url": null
            },
            "completed": false
        }, {
            "id": 2138,
            "title": "Configure ACLâ€™s to protect the LoopBack API",
            "slug": "configure-acl-s-to-protect-the-loopback-api",
            "duration": 179,
            "state": "published",
            "series_row_order": 8255351,
            "library_list": [],
            "language_list": [],
            "framework_list": [],
            "tool_list": [],
            "platform_list": ["node"],
            "skillset_list": [],
            "skill_level_list": [],
            "http_url": "https://egghead.io/lessons/configure-acl-s-to-protect-the-loopback-api",
            "url": "https://egghead.io/api/v1/lessons/configure-acl-s-to-protect-the-loopback-api",
            "summary": "In this lesson we will learn how to protect our API using ACLâ€™s. \r\n\r\nACL stands for Access Control List and it's function is to control permissions of resources in the API. It does this by keeping a mapping between an API resource and a principal. An API resource as an API endpoint like a remote method or a whole model. A principal in LoopBack are users or applications that can be grouped in a role.\r\n\r\nIn order to get the API production ready we will protect a selection of our REST endpoints with ACLâ€™s. We will look at how we can obtain an access token and how we can use that in our requests.\r\n\r\nFinally we will write some unit tests to make sure that the ACL does what we expect. We enhance our test setup by exporting `request` with is provided by the [supertest](https://www.npmjs.com/package/supertest) library.\r\n\r\nIn our tests we use `request` to verify that our endpoints return the correct HTTP status code.  ",
            "icon_url": "//d1xwtr0qwr70yv.cloudfront.net/assets/tech/node-48eacec51baa2fa9215f271df5b2afd5.svg",
            "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/configure-acl-s-to-protect-the-loopback-api/configure-acl-s-to-protect-the-loopback-api.jpg",
            "transcript_url": "https://egghead.io/api/v1/lessons/configure-acl-s-to-protect-the-loopback-api/transcript",
            "technology": {
                "name": "node",
                "label": "Node.js",
                "http_url": "https://egghead.io/technologies/node",
                "logo_http_url": "//d1xwtr0qwr70yv.cloudfront.net/assets/tech/node-48eacec51baa2fa9215f271df5b2afd5.svg"
            },
            "lesson_http_url": "https://egghead.io/lessons/configure-acl-s-to-protect-the-loopback-api",
            "type": "Lesson",
            "instructor_url": "https://egghead.io/api/v1/instructors/bram-borggreve",
            "instructor": {
                "slug": "bram-borggreve",
                "full_name": "Bram Borggreve",
                "http_url": "https://egghead.io/instructors/bram-borggreve",
                "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/118/thumb/foto-bram-square-500.png?1488664588"
            },
            "wistia_id": "7g21ovn8zh",
            "media_urls": {
                "wistia_url": "https://fast.wistia.com/medias/7g21ovn8zh",
                "hls_url": null,
                "dash_url": null
            },
            "completed": false
        }, {
            "id": 2139,
            "title": "Create a boot script to run code at the start of a LoopBack API",
            "slug": "create-a-boot-script-to-run-code-at-the-start-of-a-loopback-api",
            "duration": 157,
            "state": "published",
            "series_row_order": 8350712,
            "library_list": [],
            "language_list": [],
            "framework_list": [],
            "tool_list": [],
            "platform_list": ["node"],
            "skillset_list": [],
            "skill_level_list": [],
            "http_url": "https://egghead.io/lessons/create-a-boot-script-to-run-code-at-the-start-of-a-loopback-api",
            "url": "https://egghead.io/api/v1/lessons/create-a-boot-script-to-run-code-at-the-start-of-a-loopback-api",
            "summary": "In this lesson we will learn how to create a boot script. \r\n\r\nWe will use a boot script to create or update a predefined admin user, and give that user an Access Token. That way we don't have to log in to the API each time we want to use it as an authenticated user.",
            "icon_url": "//d1xwtr0qwr70yv.cloudfront.net/assets/tech/node-48eacec51baa2fa9215f271df5b2afd5.svg",
            "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/create-a-boot-script-to-run-code-at-the-start-of-a-loopback-api/create-a-boot-script-to-run-code-at-the-start-of-a-loopback-api.jpg",
            "transcript_url": "https://egghead.io/api/v1/lessons/create-a-boot-script-to-run-code-at-the-start-of-a-loopback-api/transcript",
            "technology": {
                "name": "node",
                "label": "Node.js",
                "http_url": "https://egghead.io/technologies/node",
                "logo_http_url": "//d1xwtr0qwr70yv.cloudfront.net/assets/tech/node-48eacec51baa2fa9215f271df5b2afd5.svg"
            },
            "lesson_http_url": "https://egghead.io/lessons/create-a-boot-script-to-run-code-at-the-start-of-a-loopback-api",
            "type": "Lesson",
            "instructor_url": "https://egghead.io/api/v1/instructors/bram-borggreve",
            "instructor": {
                "slug": "bram-borggreve",
                "full_name": "Bram Borggreve",
                "http_url": "https://egghead.io/instructors/bram-borggreve",
                "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/118/thumb/foto-bram-square-500.png?1488664588"
            },
            "wistia_id": "wfinrxtki9",
            "media_urls": {
                "wistia_url": "https://fast.wistia.com/medias/wfinrxtki9",
                "hls_url": null,
                "dash_url": null
            },
            "completed": false
        }, {
            "id": 2113,
            "title": "Create a MongoDB DataSource in LoopBack",
            "slug": "create-a-mongodb-datasource-in-loopback",
            "duration": 104,
            "state": "published",
            "series_row_order": 8371192,
            "library_list": [],
            "language_list": [],
            "framework_list": [],
            "tool_list": [],
            "platform_list": ["node"],
            "skillset_list": [],
            "skill_level_list": [],
            "http_url": "https://egghead.io/lessons/create-a-mongodb-datasource-in-loopback",
            "url": "https://egghead.io/api/v1/lessons/create-a-mongodb-datasource-in-loopback",
            "summary": "In this lesson we will create a dynamic datasource in LoopBack. If the API is started with the environment variable `MONGODB_URL` it will use this url and the `loopback-connector-mongodb` package to store the data in MongoDB.\r\n\r\nIn the course we will use a local MongoDB instance. If you don't have MongoDB running locally you can always create a [free MongoDB Atlas database](https://egghead.io/lessons/create-a-free-database-on-mongodb-atlas).\r\n",
            "icon_url": "//d1xwtr0qwr70yv.cloudfront.net/assets/tech/node-48eacec51baa2fa9215f271df5b2afd5.svg",
            "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/create-a-mongodb-datasource-in-loopback/create-a-mongodb-datasource-in-loopback.jpg",
            "transcript_url": "https://egghead.io/api/v1/lessons/create-a-mongodb-datasource-in-loopback/transcript",
            "technology": {
                "name": "node",
                "label": "Node.js",
                "http_url": "https://egghead.io/technologies/node",
                "logo_http_url": "//d1xwtr0qwr70yv.cloudfront.net/assets/tech/node-48eacec51baa2fa9215f271df5b2afd5.svg"
            },
            "lesson_http_url": "https://egghead.io/lessons/create-a-mongodb-datasource-in-loopback",
            "type": "Lesson",
            "instructor_url": "https://egghead.io/api/v1/instructors/bram-borggreve",
            "instructor": {
                "slug": "bram-borggreve",
                "full_name": "Bram Borggreve",
                "http_url": "https://egghead.io/instructors/bram-borggreve",
                "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/118/thumb/foto-bram-square-500.png?1488664588"
            },
            "wistia_id": "u0e1lb8s8q",
            "media_urls": {
                "wistia_url": "https://fast.wistia.com/medias/u0e1lb8s8q",
                "hls_url": null,
                "dash_url": null
            },
            "completed": false
        }, {
            "id": 2159,
            "title": "Create a free database on MongoDB Atlas",
            "slug": "create-a-free-database-on-mongodb-atlas",
            "duration": 80,
            "state": "published",
            "series_row_order": 8379898,
            "library_list": [],
            "language_list": [],
            "framework_list": [],
            "tool_list": [],
            "platform_list": ["node"],
            "skillset_list": [],
            "skill_level_list": [],
            "http_url": "https://egghead.io/lessons/create-a-free-database-on-mongodb-atlas",
            "url": "https://egghead.io/api/v1/lessons/create-a-free-database-on-mongodb-atlas",
            "summary": "In this lesson we will create a free account on monogdb.com. After the account has been created we will create a group in MongoDB Atlas and in that group we create a free cluster. In order to create the cluster we need to provide a username and password. We create our user called `admin` and have the site generate our password for use. Once the cluster is created we look at where we can find the connection string.",
            "icon_url": "//d1xwtr0qwr70yv.cloudfront.net/assets/tech/node-48eacec51baa2fa9215f271df5b2afd5.svg",
            "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/create-a-free-database-on-mongodb-atlas/create-a-free-database-on-mongodb-atlas.jpg",
            "transcript_url": "https://egghead.io/api/v1/lessons/create-a-free-database-on-mongodb-atlas/transcript",
            "technology": {
                "name": "node",
                "label": "Node.js",
                "http_url": "https://egghead.io/technologies/node",
                "logo_http_url": "//d1xwtr0qwr70yv.cloudfront.net/assets/tech/node-48eacec51baa2fa9215f271df5b2afd5.svg"
            },
            "lesson_http_url": "https://egghead.io/lessons/create-a-free-database-on-mongodb-atlas",
            "type": "Lesson",
            "instructor_url": "https://egghead.io/api/v1/instructors/bram-borggreve",
            "instructor": {
                "slug": "bram-borggreve",
                "full_name": "Bram Borggreve",
                "http_url": "https://egghead.io/instructors/bram-borggreve",
                "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/118/thumb/foto-bram-square-500.png?1488664588"
            },
            "wistia_id": "mukmn05cnf",
            "media_urls": {
                "wistia_url": "https://fast.wistia.com/medias/mukmn05cnf",
                "hls_url": null,
                "dash_url": null
            },
            "completed": false
        }, {
            "id": 2111,
            "title": "Filter model data in LoopBack",
            "slug": "filter-model-data-in-loopback",
            "duration": 76,
            "state": "published",
            "series_row_order": 8385531,
            "library_list": [],
            "language_list": [],
            "framework_list": [],
            "tool_list": [],
            "platform_list": ["node"],
            "skillset_list": [],
            "skill_level_list": [],
            "http_url": "https://egghead.io/lessons/filter-model-data-in-loopback",
            "url": "https://egghead.io/api/v1/lessons/filter-model-data-in-loopback",
            "summary": "In this lesson we will look at the filters that can be used to retrieve and manipulate the data stored in LoopBack. \r\n\r\nWe will use [Postman](https://www.getpostman.com/) to interact with the `/Categories` and `/Products` endpoints. \r\n\r\nUsing the URL parameters we will apply at the various filters LoopBack has to offer: `include`, `order`, `where`, `fields`, `limit` and `offset`. ",
            "icon_url": "//d1xwtr0qwr70yv.cloudfront.net/assets/tech/node-48eacec51baa2fa9215f271df5b2afd5.svg",
            "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/filter-model-data-in-loopback/filter-model-data-in-loopback.jpg",
            "transcript_url": "https://egghead.io/api/v1/lessons/filter-model-data-in-loopback/transcript",
            "technology": {
                "name": "node",
                "label": "Node.js",
                "http_url": "https://egghead.io/technologies/node",
                "logo_http_url": "//d1xwtr0qwr70yv.cloudfront.net/assets/tech/node-48eacec51baa2fa9215f271df5b2afd5.svg"
            },
            "lesson_http_url": "https://egghead.io/lessons/filter-model-data-in-loopback",
            "type": "Lesson",
            "instructor_url": "https://egghead.io/api/v1/instructors/bram-borggreve",
            "instructor": {
                "slug": "bram-borggreve",
                "full_name": "Bram Borggreve",
                "http_url": "https://egghead.io/instructors/bram-borggreve",
                "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/118/thumb/foto-bram-square-500.png?1488664588"
            },
            "wistia_id": "yotsysz7bo",
            "media_urls": {
                "wistia_url": "https://fast.wistia.com/medias/yotsysz7bo",
                "hls_url": null,
                "dash_url": null
            },
            "completed": false
        }, {
            "id": 2140,
            "title": "Deploy a LoopBack API project using now.sh",
            "slug": "deploy-a-loopback-api-project-using-now-sh",
            "duration": 161,
            "state": "published",
            "series_row_order": 8387069,
            "library_list": [],
            "language_list": [],
            "framework_list": [],
            "tool_list": [],
            "platform_list": ["node"],
            "skillset_list": [],
            "skill_level_list": [],
            "http_url": "https://egghead.io/lessons/deploy-a-loopback-api-project-using-now-sh",
            "url": "https://egghead.io/api/v1/lessons/deploy-a-loopback-api-project-using-now-sh",
            "summary": "In this lesson we will look at how to deploy our LoopBack API project using [now](https://zeit.co/now). \r\n\r\nWe will install the now client, create an accountÂ and deploy our app.\r\n\r\nUsing `now secrets` features we will store our database connection url which we get by creating a [free MongoDB Atlas database](https://egghead.io/lessons/create-a-free-database-on-mongodb-atlas).\r\n\r\nIn order to simplify following deployments we will add a `now` key to our `package.json` where we use the `name`, `alias` and `env` parameters to configure our deployments. We will add some npm scripts so we can deploy our app in the desired way using `npm run now`.",
            "icon_url": "//d1xwtr0qwr70yv.cloudfront.net/assets/tech/node-48eacec51baa2fa9215f271df5b2afd5.svg",
            "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/deploy-a-loopback-api-project-using-now-sh/deploy-a-loopback-api-project-using-now-sh.jpg",
            "transcript_url": "https://egghead.io/api/v1/lessons/deploy-a-loopback-api-project-using-now-sh/transcript",
            "technology": {
                "name": "node",
                "label": "Node.js",
                "http_url": "https://egghead.io/technologies/node",
                "logo_http_url": "//d1xwtr0qwr70yv.cloudfront.net/assets/tech/node-48eacec51baa2fa9215f271df5b2afd5.svg"
            },
            "lesson_http_url": "https://egghead.io/lessons/deploy-a-loopback-api-project-using-now-sh",
            "type": "Lesson",
            "instructor_url": "https://egghead.io/api/v1/instructors/bram-borggreve",
            "instructor": {
                "slug": "bram-borggreve",
                "full_name": "Bram Borggreve",
                "http_url": "https://egghead.io/instructors/bram-borggreve",
                "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/118/thumb/foto-bram-square-500.png?1488664588"
            },
            "wistia_id": "f7u12dj1us",
            "media_urls": {
                "wistia_url": "https://fast.wistia.com/medias/f7u12dj1us",
                "hls_url": null,
                "dash_url": null
            },
            "completed": false
        }]
    }
}